generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./app_db.sqlite"
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  password      String?
  profileImage  Bytes?
  role          String?        @default("USER")
  location      String?
  latitude      Float?
  longitude     Float?
  ipAddress     String?
  phone         String?
  bio           String?
  title         String?
  facebook      String?
  instagram     String?
  twitter       String?
  youtube       String?
  linkedin      String?
  website       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imageOffsetX  Float?
  imageOffsetY  Float?
  imageZoom     Float?
  geodata       String?
  image         String?
  accounts      Account[]
  conversations Conversation[]
  ownedGroups   Group[]
  groups        GroupUser[]
  sessions      Session[]
  userImages    UserImages[]
}

model UserImages {
  id        String   @id @default(uuid())
  userId    String
  type      String
  data      Bytes
  fileName  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Group {
  id          String      @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id])
  members     GroupUser[]
}

model GroupUser {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  id_token          String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Conversation {
  id                 String   @id @default(cuid())
  conversationId     String   @unique @default(uuid())
  userId             String
  conversationSchema String?
  conversationData   String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}


model AIProvider {
  id        Int      @id @default(autoincrement()) // ✅ Auto-incrementing ID
  category  String   @unique // e.g., "Chat", "Embedding", "Vision", "Speech"
  provider  String   // e.g., "OpenAI", "Anthropic", "Meta", "DeepSeek"
  modelType String   // e.g., "LLM", "GEN", "AI", "ML"
  models    Model[]
}

model Model {
  id              Int      @id @default(autoincrement()) 
  name            String   @unique
  description     String?
  type            String
  inputCost       Float?
  cachedInputCost Float?
  outputCost      Float?
  totalCost       Float?
  providerId      Int      // ✅ Changed from llmId to providerId
  provider        AIProvider @relation(fields: [providerId], references: [id], onDelete: Cascade) // ✅ Corrected reference
  presets         Preset[]
}


model Preset {
  id               Int      @id @default(autoincrement()) // ✅ Auto-incrementing ID
  name             String   @unique
  description      String?
  modelId          Int      // ✅ Now references an integer ID
  prompt           String?
  temperature      Float
  maxTokens        Int
  topP             Float
  frequencyPenalty Float
  presencePenalty  Float
  createdAt        DateTime @default(now())
  model            Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  @@map("preset")
}
